LeetCode Problem: 1341. Movie Rating
Problem Description:
Table: Movies

Column Name	Type
movie_id	int
title	varchar
movie_id is the primary key (column with unique values) for this table.

title is the name of the movie.

Table: Users

Column Name	Type
user_id	int
name	varchar
user_id is the primary key (column with unique values) for this table.

The column name has unique values.

Table: MovieRating

Column Name	Type
movie_id	int
user_id	int
rating	int
created_at	date
(movie_id, user_id) is the primary key (column with unique values) for this table.

This table contains the rating of a movie by a user in their review.

created_at is the user's review date.

Task:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.

Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.

Return: The result table in any order.

Example:
Input:

plaintext
Movies table:
+-------------+--------------+
| movie_id    | title        |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+

Users table:
+-------------+--------------+
| user_id     | name         |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+

MovieRating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+
Output:

plaintext
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+
Solution:
The following SQL queries address the given tasks:

1. Find the name of the user who has rated the greatest number of movies:
sql
SELECT name 
FROM Users 
WHERE user_id = (
    SELECT user_id 
    FROM MovieRating 
    GROUP BY user_id 
    ORDER BY COUNT(*) DESC, MIN(name) ASC 
    LIMIT 1
);
2. Find the movie name with the highest average rating in February 2020:
sql
SELECT title 
FROM Movies 
WHERE movie_id = (
    SELECT movie_id 
    FROM MovieRating 
    WHERE created_at BETWEEN '2020-02-01' AND '2020-02-29'
    GROUP BY movie_id 
    ORDER BY AVG(rating) DESC, MIN(title) ASC 
    LIMIT 1
);
Explanation:

Query 1:

SELECT name FROM Users WHERE user_id = (...): This selects the name of the user who has rated the greatest number of movies.

SELECT user_id FROM MovieRating GROUP BY user_id ORDER BY COUNT() DESC, MIN(name) ASC LIMIT 1:* This part groups the ratings by user_id and orders them by the count of ratings in descending order and then by name in ascending order (to handle ties). The LIMIT 1 clause ensures that only one user is selected.

Query 2:

SELECT title FROM Movies WHERE movie_id = (...): This selects the title of the movie with the highest average rating in February 2020.

SELECT movie_id FROM MovieRating WHERE created_at BETWEEN '2020-02-01' AND '2020-02-29' GROUP BY movie_id ORDER BY AVG(rating) DESC, MIN(title) ASC LIMIT 1: This part filters the ratings to include only those from February 2020, groups the ratings by movie_id, and orders them by the average rating in descending order and then by title in ascending order (to handle ties). The LIMIT 1 clause ensures that only one movie is selected.

Comments:
These solutions efficiently find the user with the most movie ratings and the movie with the highest average rating in February 2020.

Make sure the database and tables are correctly set up before running the queries.