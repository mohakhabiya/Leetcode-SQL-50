LeetCode Problem: 1378. Replace Employee ID With The Unique Identifier

Problem Description:
Table: Employees

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+-------------------------+
id is the primary key (column with unique values) for this table.

Each row of this table contains the id and the name of an employee in a company.

Table: EmployeeUNI

Column Name	Type
id	int
unique_id	int
(id, unique_id) is the primary key (combination of columns with unique values) for this table.

Each row of this table contains the id and the corresponding unique id of an employee in the company.

Task: Write a solution to show the unique ID of each user. If a user does not have a unique ID, just show null.

Return: The result table in any order.

Example:
Input:

plaintext
Employees table:
+----+----------+
| id | name     |
+----+----------+
| 1  | Alice    |
| 7  | Bob      |
| 11 | Meir     |
| 90 | Winston  |
| 3  | Jonathan |
+----+----------+

EmployeeUNI table:
+----+-----------+
| id | unique_id |
+----+-----------+
| 3  | 1         |
| 11 | 2         |
| 90 | 3         |
+----+-----------+
Output:

plaintext
+-----------+----------+
| unique_id | name     |
+-----------+----------+
| null      | Alice    |
| null      | Bob      |
| 2         | Meir     |
| 3         | Winston  |
| 1         | Jonathan |
+-----------+----------+
Explanation:

Alice and Bob do not have a unique ID, so we show null instead.

The unique ID of Meir is 2.

The unique ID of Winston is 3.

The unique ID of Jonathan is 1.

Solution:
The following SQL query selects the unique_id and name of each employee, using a left join to include all employees and show null for those without a unique ID.

sql
-- SQL Solution to show the unique ID of each user, with null if no unique ID exists
SELECT EUNI.unique_id, E.name
FROM Employees E
LEFT JOIN EmployeeUNI EUNI
ON E.id = EUNI.id;
Explanation of the Code:

SELECT EUNI.unique_id, E.name: This part of the query specifies that we want to select the unique_id from the EmployeeUNI table and the name from the Employees table.

FROM Employees E: This indicates that the data should be selected from the Employees table, aliased as E.

LEFT JOIN EmployeeUNI EUNI ON E.id= EUNI.id: This joins the EmployeeUNI table (aliased as EUNI) with the Employees table using a left join on the id column. A left join ensures that all employees are included in the result, even if they don't have a corresponding unique ID in the EmployeeUNI table. For those without a unique ID, the result will show null.

Comments:
This solution ensures that all employees are included in the result, with null values for those who do not have a unique ID in the EmployeeUNI table.

Make sure the database and tables are correctly set up before running the query.