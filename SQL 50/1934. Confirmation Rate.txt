LeetCode Problem: 1934. Confirmation Rate

Problem Description:
Table: Signups

Column Name	Type
user_id	int
time_stamp	datetime
user_id is the column with unique values for this table.

Each row contains information about the signup time for the user with ID user_id.

Table: Confirmations

Column Name	Type
user_id	int
time_stamp	datetime
action	ENUM
(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.

user_id is a foreign key (reference column) to the Signups table.

action is an ENUM (category) of the type ('confirmed', 'timeout').

Each row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').

Task: Write a solution to find the confirmation rate of each user.

The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages.

The confirmation rate of a user that did not request any confirmation messages is 0.

Round the confirmation rate to two decimal places.

Return: The result table in any order.

Example:
Input:

plaintext
Signups table:
+---------+---------------------+
| user_id | time_stamp          |
+---------+---------------------+
| 3       | 2020-03-21 10:16:13 |
| 7       | 2020-01-04 13:57:59 |
| 2       | 2020-07-29 23:09:44 |
| 6       | 2020-12-09 10:39:37 |
+---------+---------------------+

Confirmations table:
+---------+---------------------+-----------+
| user_id | time_stamp          | action    |
+---------+---------------------+-----------+
| 3       | 2021-01-06 03:30:46 | timeout   |
| 3       | 2021-07-14 14:00:00 | timeout   |
| 7       | 2021-06-12 11:57:29 | confirmed |
| 7       | 2021-06-13 12:58:28 | confirmed |
| 7       | 2021-06-14 13:59:27 | confirmed |
| 2       | 2021-01-22 00:00:00 | confirmed |
| 2       | 2021-02-28 23:59:59 | timeout   |
+---------+---------------------+-----------+
Output:

plaintext
+---------+-------------------+
| user_id | confirmation_rate |
+---------+-------------------+
| 6       | 0.00              |
| 3       | 0.00              |
| 7       | 1.00              |
| 2       | 0.50              |
+---------+-------------------+
Explanation:

User 6 did not request any confirmation messages. The confirmation rate is 0.

User 3 made 2 requests and both timed out. The confirmation rate is 0.

User 7 made 3 requests and all were confirmed. The confirmation rate is 1.

User 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5.

Solution:
The following SQL query calculates the confirmation rate for each user:

sql
-- SQL Solution to find the confirmation rate of each user
SELECT 
    S.user_id, 
    ROUND(COALESCE(SUM(CASE WHEN C.action = 'confirmed' THEN 1 ELSE 0 END) / COUNT(C.action), 0), 2) AS confirmation_rate
FROM 
    Signups S
LEFT JOIN 
    Confirmations C 
ON 
    S.user_id = C.user_id
GROUP BY 
    S.user_id
ORDER BY 
    S.user_id;
Explanation of the Code:

SELECT S.user_id: This part of the query specifies that we want to select the user_id from the Signups table (aliased as S).

ROUND(COALESCE(SUM(CASE WHEN C.action= 'confirmed' THEN 1 ELSE 0 END) / COUNT(C.action), 0), 2) AS confirmation_rate: This calculates the confirmation rate for each user.

CASE WHEN C.action= 'confirmed' THEN 1 ELSE 0 END: This assigns a value of 1 for 'confirmed' actions and 0 otherwise.

SUM(CASE WHEN C.action= 'confirmed' THEN 1 ELSE 0 END) / COUNT(C.action): This calculates the confirmation rate by dividing the number of 'confirmed' actions by the total number of actions.

COALESCE(..., 0): This ensures that users who did not request any confirmation messages have a confirmation rate of 0.

ROUND(..., 2): This rounds the confirmation rate to two decimal places.

FROM Signups S: This indicates that the data should be selected from the Signups table, aliased as S.

LEFT JOIN Confirmations C ON S.user_id = C.user_id: This performs a left join of the Confirmations table with the Signups table on the user_id column. This ensures that all users are included in the result, even if they don't have any confirmations.

GROUP BY S.user_id: This groups the results by user_id.

ORDER BY S.user_id: This orders the results by user_id.

Comments:
This solution efficiently calculates the confirmation rate for each user.

Make sure the database and tables are correctly set up before running the query.