LeetCode Problem: 550. Game Play Analysis IV

Problem Description:
Table: Activity

Column Name	Type
player_id	int
device_id	int
event_date	date
games_played	int
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.

This table shows the activity of players of some games.

Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on some day using some device.

Task: Write a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.

Return: The result format is in the following example.

Example:
Input:

plaintext
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output:

plaintext
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
Explanation:

Only the player with ID 1 logged back in after the first day he had logged in, so the answer is 1/3 = 0.33.

Solution:
The following SQL query calculates the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places:

sql
-- SQL Solution to report the fraction of players that logged in again on the day after the day they first logged in
WITH FirstLogin AS (
    SELECT 
        player_id, 
        MIN(event_date) AS first_login_date
    FROM 
        Activity
    GROUP BY 
        player_id
),

NextDayLogin AS (
    SELECT 
        FL.player_id, 
        (FL.first_login_date + INTERVAL 1 DAY) AS next_day
    FROM 
        FirstLogin FL
)

SELECT 
    ROUND(COUNT(DISTINCT FL.player_id) * 1.0 / COUNT(DISTINCT A.player_id), 2) AS fraction
FROM 
    FirstLogin FL
JOIN 
    NextDayLogin NDL ON FL.player_id = NDL.player_id
LEFT JOIN 
    Activity A ON NDL.player_id = A.player_id AND NDL.next_day = A.event_date
WHERE 
    A.event_date IS NOT NULL;
Explanation of the Code:

WITH FirstLogin AS (SELECT player_id, MIN(event_date) AS first_login_date FROM Activity GROUP BY player_id): This Common Table Expression (CTE) calculates the earliest login date for each player.

WITH NextDayLogin AS (SELECT FL.player_id, (FL.first_login_date + INTERVAL 1 DAY) AS next_day FROM FirstLogin FL): This CTE calculates the day after the first login date for each player.

SELECT ROUND(COUNT(DISTINCT FL.player_id) * 1.0 / COUNT(DISTINCT A.player_id), 2) AS fraction: This part of the query calculates the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places.

COUNT(DISTINCT FL.player_id): This counts the number of distinct players that logged in again on the day after the day they first logged in.

COUNT(DISTINCT A.player_id): This counts the total number of distinct players.

ROUND(..., 2): This rounds the fraction to 2 decimal places.

FROM FirstLogin FL JOIN NextDayLogin NDL ON FL.player_id = NDL.player_id LEFT JOIN Activity A ON NDL.player_id = A.player_id AND NDL.next_day = A.event_date: This joins the FirstLogin and NextDayLogin CTEs and the Activity table to check if players logged in again on the day after the day they first logged in.

WHERE A.event_date IS NOT NULL: This filters the results to include only those players who logged in again on the day after the day they first logged in.

Comments:
This solution efficiently calculates the fraction of players that logged in again on the day after the day they first logged in.

Make sure the database and tables are correctly set up before running the query.