LeetCode Problem: 1164. Product Price at a Given Date
Problem Description:
Table: Products

Column Name	Type
product_id	int
new_price	int
change_date	date
(product_id, change_date) is the primary key (combination of columns with unique values) of this table.

Each row of this table indicates that the price of some product was changed to a new price at some date.

Task: Write a solution to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

Return: The result table in any order.

Example:
Input:

plaintext
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+
Output:

plaintext
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+
Solution:
The following SQL query finds the prices of all products on 2019-08-16:

sql
-- SQL Solution to find the prices of all products on 2019-08-16
SELECT 
    p.product_id, 
    COALESCE(new_price, 10) AS price
FROM (
    SELECT 
        product_id,
        new_price,
        ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rn
    FROM Products
    WHERE change_date <= '2019-08-16'
) p
WHERE rn = 1
UNION
SELECT 
    product_id, 
    10 AS price
FROM Products
GROUP BY product_id
HAVING COUNT(*) = 0;
Explanation of the Code:

Inner Query:

SELECT product_id, new_price, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rn: This part of the query assigns a row number to each product's price change, ordered by change_date in descending order.

FROM Products: This indicates that the data should be selected from the Products table.

WHERE change_date <= '2019-08-16': This filters the rows to include only those with change_date on or before '2019-08-16'.

Outer Query:

SELECT p.product_id, COALESCE(new_price, 10) AS price FROM (...) p WHERE rn = 1: This selects the most recent price change for each product on or before '2019-08-16'. If no price change exists for a product, it defaults to 10 using the COALESCE function.

UNION:

SELECT product_id, 10 AS price FROM Products GROUP BY product_id HAVING COUNT() = 0:* This part ensures that products with no price changes before '2019-08-16' are included with a default price of 10.

Comments:
This solution efficiently calculates the prices of all products on 2019-08-16, considering both existing price changes and default prices.

Make sure the database and table are correctly set up before running the query.