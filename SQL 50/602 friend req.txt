LeetCode Problem: 602. Friend Requests II: Who Has the Most Friends
Problem Description:
Table: RequestAccepted

Column Name	Type
requester_id	int
accepter_id	int
accept_date	date
(requester_id, accepter_id) is the primary key (combination of columns with unique values) for this table.

This table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.

Task: Write a solution to find the people who have the most friends and the most friends number.

Return: The result table in any order.

Example:
Input:

plaintext
RequestAccepted table:
+--------------+-------------+-------------+
| requester_id | accepter_id | accept_date |
+--------------+-------------+-------------+
| 1            | 2           | 2016/06/03  |
| 1            | 3           | 2016/06/08  |
| 2            | 3           | 2016/06/08  |
| 3            | 4           | 2016/06/09  |
+--------------+-------------+-------------+
Output:

plaintext
+----+-----+
| id | num |
+----+-----+
| 3  | 3   |
+----+-----+
Explanation:

The person with ID 3 is a friend of people 1, 2, and 4, so they have three friends in total, which is the most number of friends compared to others.

Solution:
The following SQL query finds the person who has the most friends and the most friends number:

sql
-- SQL Solution to find the person who has the most friends and the most friends number
WITH Friends AS (
    SELECT requester_id AS id
    FROM RequestAccepted
    UNION ALL
    SELECT accepter_id AS id
    FROM RequestAccepted
),
FriendCount AS (
    SELECT id, COUNT(*) AS num
    FROM Friends
    GROUP BY id
)
SELECT id, num
FROM FriendCount
ORDER BY num DESC, id ASC
LIMIT 1;
Explanation of the Code:

WITH Friends AS (...):

This Common Table Expression (CTE) creates a temporary table Friends that combines all requester_id and accepter_id values to form a unified list of friends.

WITH FriendCount AS (...):

This CTE calculates the number of friends for each person by counting the occurrences of each id in the Friends table.

SELECT id, num FROM FriendCount ORDER BY num DESC, id ASC LIMIT 1:

This part of the query selects the id and num (number of friends) from the FriendCount table.

It orders the results by the number of friends in descending order (num DESC) and by id in ascending order (id ASC) to handle ties.

The LIMIT 1 clause ensures that only one person (with the most friends) is selected.

Comments:
This solution efficiently identifies the person with the most friends and the number of friends they have.

Make sure the database and table are correctly set up before running the query.